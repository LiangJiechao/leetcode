package leetcode.labuladong.la23dp;

/**DP模板
 * 递归法是「自顶向下」，动态规划叫做「自底向上」。
 * 首先看取值范围，递归回溯一维数组，100就是深度的极限了（何况本题是100²）
 * 如果是求走迷宫的【路径】，必然是回溯；如果是走迷宫的【路径的条数】，必然是dp--------(这个竟然屡试不爽！！！！)
 *
 * 无后效性：
 * 如果对于某个状态，我们可以只关注状态的值，而不需要关注状态是如何转移过来的话，
 * 那么这就是一个无后效性的问题，可以考虑使用 DP 解决
 *
 * 另外一个更加实在的技巧，我们还可以通过 数据范围 来猜测是不是可以用 DP 来做。
 * 因为 DP 是一个递推的过程，因此如果数据范围是 10^5~10^6 的话，可以考虑是不是可以使用一维 DP 来解决；
 * 如果数据范围是 10^2~10^3 的话，可以考虑是不是可以使用二维 DP 来做 ...
 * @author xiaoliang
 * @date 2022/03/10 11:43
 **/
public class DPTemplate {

//    # 初始化 base case
//    dp[0][0][...] = base
//    # 进⾏状态转移
//    for 状态1 in 状态1的所有取值：
//            for 状态2 in 状态2的所有取值：
//                for ...
//                    dp[状态1][状态2][...] = 求最值(选择1，选择2...)


//    /**
//     * 消息附加动作
//     */
//    private JSONArray actions;
//    定义了一个按钮，最多可以9个，放到action那里 ["按钮名:request(url,{data:{key:value,..},type:'POST'})"]

}









